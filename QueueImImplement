package data_structure_practice;

public class QueueImImplement {

	public static void main(String[] args) {
		int queueSize=3;
		char deletedItem;
		ArrayQueue Q =new ArrayQueue(queueSize);
		
		Q.enQueue('A');
		Q.printQueue();
		
		Q.enQueue('B');
		Q.printQueue();

		deletedItem=Q.deQueue();
		if(deletedItem !=0) {
			System.out.println("seleted Item:"+deletedItem);
		}
		Q.printQueue();
		
		Q.enQueue('C');
		Q.printQueue();
		
		deletedItem=Q.deQueue();
		if(deletedItem !=0) {
			System.out.println("deleted Item:" + deletedItem);
		}
		Q.printQueue();
		
		deletedItem = Q.deQueue();
		if(deletedItem !=0) {
			System.out.println("deleted Item:"+ deletedItem);
		}
		Q.printQueue();
		
		deletedItem =Q.deQueue();
		if(deletedItem != 0)
			System.out.println("deleted Item : " + deletedItem);
		Q.printQueue();

		deletedItem = Q.deQueue();
		if(deletedItem != 0)
			System.out.println("deleted Item : " + deletedItem);
		Q.printQueue();		
		
		deletedItem = Q.deQueue();
		if(deletedItem != 0)
			System.out.println("deleted Item : " + deletedItem);
		Q.printQueue();
		
    }

}

interface Queue{
	boolean isEmpty();
	void enQueue(char item);
	char deQueue();
	void delete();
	char peek();
}

class ArrayQueue implements Queue{
	private int front;//queue의 첫번째 원소의 인덱스
	private int rear;//queue의 마지막 원소의 인덱스
	private int queueSize;//queue의 사이즈
	private char itemArray[];
	
	public ArrayQueue(int queueSize) {
		front=-1;// front,rear을 -1로 초기화-> 아무것도 없을떄의 인덱스를-1로 하는것!
		rear=-1;
		this.queueSize= queueSize;
		itemArray =new char[this.queueSize];//queue 사이즈만큼 char 리스트 생성	
	}
	public boolean isEmpty() {
		return (front==rear);//첫번째 원소의 인덱스와 마지막 원소의 인덱스가 같으므로 비어있는 queue
	}
	public boolean isFull() {
		return (rear==this.queueSize);//rear 값이 마지막 원소의 인덱스 (n)일 경우 큐가 다 차있음
	}
	
	public void enQueue(char item) {
		if(isFull()) {//full일 경우 입력 못함
			System.out.println("Inserting fail! Array Queue is full!");
		}else {
			itemArray[++rear]=item;//rear=rear+1을 해준후(마지막원소의 인덱스를 뒤로 이동후 ) item 삽입 
			System.out.println("inserted item :"+item);
		}
	}
	
	public char deQueue() {
		if(isEmpty()) {//비어있을 경우 삭제못함
			System.out.println("Deleting fail! Array Queue is fail!");
			return ' ';
		}else {
			return itemArray[++front];
			//front=front+1 을 해주고 해당 인덱스의 원소를 출력(front가 -1부터 시작하므로)
		}
	}	
	
	public void delete() {
		if(isEmpty()) {
			System.out.println("Deleteing fail! Array Queue is empty!");
		}else {
			++front;//front=front+1 을 해주어 인덱싱을 바꿔줌
		}
	}
	
	public char peek() {
		if(isEmpty()) {
			System.out.println("Peeking fail! Array Queue is empty");
			return ' ';
		}else {
			return itemArray[front+1];//배열의 맨위원소 출력
		}
	}
	
	public void printQueue() {
		if(isEmpty()) {
			System.out.println("Array Queue is empty!! %n %n");
		}else {
			System.out.println("Array Queue>>");
			for(int i=front+1;i<rear+1;i++) {
				System.out.printf("%c",itemArray[i]);
			}
			System.out.println();System.out.println();
		}
	}
	
	
}
